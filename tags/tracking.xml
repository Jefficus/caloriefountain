<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Project Calorie Fountain (Posts about tracking)</title><link>https://www.caloriefountain.org/</link><description></description><atom:link href="https://www.caloriefountain.org/tags/tracking.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2023 Jefferson Smith </copyright><lastBuildDate>Sun, 16 Apr 2023 01:08:09 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Sample tagging system</title><link>https://www.caloriefountain.org/posts/sampletaggingsystem/</link><dc:creator>Jefferson Smith</dc:creator><description>&lt;p&gt;&lt;img class="float-right blogthumb" src="https://www.caloriefountain.org/posts/images/label-maker.jpg"&gt;To make it easier to track trials, collect data, and avoid the predictable confusion of having 20 identical test containers, I've implemented a tracking tag system with barcode identifiers. These barcodes are scannable by my data entry tool (described above) which can then quickly pre-load the entry screen with the pertinent unit id and be ready for my readings. &lt;/p&gt;
&lt;p&gt;For completeness, each tank will have an ID and each plant within that tank will also have an ID. When individual specimens are seeding/planted, their IDs will be linked to the tank ID in which they're placed, so that measurements of the tank (temp, pH, etc) can be easily matched to the success metrics of the plant.&lt;/p&gt;
&lt;p&gt;For the record (in case anybody else is using Linux and wants to know about my toolchain) my tracking codes are simply the datestamp (to the second and without punctuation) of when the sample tag was printed. For example, the tag shown in the picture here is 20230318170214. This is printed over USB to a Dymo LabelManager 280, using the opensource dymoprint python script available &lt;a href="https://github.com/computerlyrik/dymoprint"&gt;here&lt;/a&gt;, and rendered in the code128 barcode format.&lt;/p&gt;
&lt;p&gt;(For completeness, the command to produce the barcodes is: &lt;code&gt;dymoprint -c code128 "$(date +%Y%m%d%H%M%S)"&lt;/code&gt;)&lt;/p&gt;</description><category>equipment</category><category>target-kratky-tank</category><category>tracking</category><guid>https://www.caloriefountain.org/posts/sampletaggingsystem/</guid><pubDate>Sun, 12 Mar 2023 23:22:00 GMT</pubDate></item><item><title>Keeping track of lab conditions</title><link>https://www.caloriefountain.org/posts/keeping-track-of-test-conditions/</link><dc:creator>Jefferson Smith</dc:creator><description>&lt;div&gt;&lt;p&gt;One of my goals for Project Calorie Fountain is that it be easy to build and simple to operate, so I should probably avoid requiring any expensive and/or complicated gadgetry in the mix, if at all possible. &lt;/p&gt;
&lt;p&gt;But that doesn’t mean my &lt;em&gt;lab&lt;/em&gt; has to be gadget-free. On the contrary. The more I can track and understand the variables in my setup, the better I’ll be able to diagnose problems as they arise, and steer the project toward simpler crops and methods.&lt;/p&gt;
&lt;p&gt;The question is: what data needs to be tracked, and how?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.caloriefountain.org/posts/keeping-track-of-test-conditions/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>equipment</category><category>metrics</category><category>sensors</category><category>telemetry</category><category>tracking</category><guid>https://www.caloriefountain.org/posts/keeping-track-of-test-conditions/</guid><pubDate>Wed, 08 Mar 2023 00:32:00 GMT</pubDate></item></channel></rss>